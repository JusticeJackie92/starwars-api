{"ast":null,"code":"import axios from \"axios\";\nexport const FETCH_CHARACTERS_BEGIN = \"FETCH_CHARACTERS_BEGIN\";\nexport const FETCH_CHARACTERS_SUCCESS = \"FETCH_CHARACTERS_SUCCESS\";\nexport const FETCH_CHARACTERS_FAILURE = \"FETCH_CHARACTERS_FAILURE\";\nexport const GET_CHARACTERS = \"GET_CHARACTERS\";\nexport const fetchCharactersBegin = () => ({\n  type: FETCH_CHARACTERS_BEGIN\n});\nexport const fetchCharactersSuccess = (data, numberOfCharacters) => ({\n  type: FETCH_CHARACTERS_SUCCESS,\n  payload: {\n    data,\n    numberOfCharacters\n  }\n});\nexport const fetchCharactersFailure = error => ({\n  type: FETCH_CHARACTERS_FAILURE,\n  payload: {\n    error\n  }\n});\nexport const getCharacters = numberOfCharacters => ({\n  type: GET_CHARACTERS,\n  payload: {\n    numberOfCharacters\n  }\n});\nexport function getMoreCharacters(numberOfCharacters) {\n  return function (dispatch, getState) {\n    const state = getState(); //if there is enough characters in store then just get them,\n    //otherwise fetch and get them\n\n    if (state.characters && state.characters.charactersAll.length >= state.characters.charactersSelected.length + numberOfCharacters && state.characters.startIndex < state.characters.data.count) {\n      dispatch(getCharacters(numberOfCharacters));\n    } else {\n      dispatch(fetchAndGetCharacters(state.characters.nextUrl, numberOfCharacters));\n    }\n  };\n}\nexport function fetchAndGetCharacters(url, numberOfCharacters) {\n  return function (dispatch) {\n    dispatch(fetchCharactersBegin());\n    return axios.get(url).then(response => {\n      dispatch(fetchCharactersSuccess(response.data, numberOfCharacters));\n    }, error => {\n      dispatch(fetchCharactersFailure(error));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/justiceirivwieri/Downloads/star-wars-characters-main/src/actions/charactersActions.ts"],"names":["axios","FETCH_CHARACTERS_BEGIN","FETCH_CHARACTERS_SUCCESS","FETCH_CHARACTERS_FAILURE","GET_CHARACTERS","fetchCharactersBegin","type","fetchCharactersSuccess","data","numberOfCharacters","payload","fetchCharactersFailure","error","getCharacters","getMoreCharacters","dispatch","getState","state","characters","charactersAll","length","charactersSelected","startIndex","count","fetchAndGetCharacters","nextUrl","url","get","then","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,MAAMC,oBAAoB,GAAG,OAAO;AACzCC,EAAAA,IAAI,EAAEL;AADmC,CAAP,CAA7B;AAIP,OAAO,MAAMM,sBAAsB,GAAG,CACpCC,IADoC,EAEpCC,kBAFoC,MAGhC;AACJH,EAAAA,IAAI,EAAEJ,wBADF;AAEJQ,EAAAA,OAAO,EAAE;AAAEF,IAAAA,IAAF;AAAQC,IAAAA;AAAR;AAFL,CAHgC,CAA/B;AAQP,OAAO,MAAME,sBAAsB,GAAIC,KAAD,KAAiB;AACrDN,EAAAA,IAAI,EAAEH,wBAD+C;AAErDO,EAAAA,OAAO,EAAE;AAAEE,IAAAA;AAAF;AAF4C,CAAjB,CAA/B;AAKP,OAAO,MAAMC,aAAa,GAAIJ,kBAAD,KAAiC;AAC5DH,EAAAA,IAAI,EAAEF,cADsD;AAE5DM,EAAAA,OAAO,EAAE;AAAED,IAAAA;AAAF;AAFmD,CAAjC,CAAtB;AAKP,OAAO,SAASK,iBAAT,CAA2BL,kBAA3B,EAAuD;AAC5D,SAAO,UAAUM,QAAV,EAAyBC,QAAzB,EAAwC;AAC7C,UAAMC,KAAK,GAAGD,QAAQ,EAAtB,CAD6C,CAG7C;AACA;;AACA,QACEC,KAAK,CAACC,UAAN,IACAD,KAAK,CAACC,UAAN,CAAiBC,aAAjB,CAA+BC,MAA/B,IACEH,KAAK,CAACC,UAAN,CAAiBG,kBAAjB,CAAoCD,MAApC,GAA6CX,kBAF/C,IAGAQ,KAAK,CAACC,UAAN,CAAiBI,UAAjB,GAA8BL,KAAK,CAACC,UAAN,CAAiBV,IAAjB,CAAsBe,KAJtD,EAKE;AACAR,MAAAA,QAAQ,CAACF,aAAa,CAACJ,kBAAD,CAAd,CAAR;AACD,KAPD,MAOO;AACLM,MAAAA,QAAQ,CACNS,qBAAqB,CAACP,KAAK,CAACC,UAAN,CAAiBO,OAAlB,EAA2BhB,kBAA3B,CADf,CAAR;AAGD;AACF,GAjBD;AAkBD;AAGD,OAAO,SAASe,qBAAT,CAA+BE,GAA/B,EAA4CjB,kBAA5C,EAAwE;AAC7E,SAAO,UAAUM,QAAV,EAAyB;AAC9BA,IAAAA,QAAQ,CAACV,oBAAoB,EAArB,CAAR;AACA,WAAOL,KAAK,CAAC2B,GAAN,CAAUD,GAAV,EAAeE,IAAf,CACJC,QAAD,IAAc;AACZd,MAAAA,QAAQ,CAACR,sBAAsB,CAACsB,QAAQ,CAACrB,IAAV,EAAgBC,kBAAhB,CAAvB,CAAR;AACD,KAHI,EAIJG,KAAD,IAAW;AACTG,MAAAA,QAAQ,CAACJ,sBAAsB,CAACC,KAAD,CAAvB,CAAR;AACD,KANI,CAAP;AAQD,GAVD;AAWD","sourcesContent":["import axios from \"axios\";\n\nexport const FETCH_CHARACTERS_BEGIN = \"FETCH_CHARACTERS_BEGIN\";\nexport const FETCH_CHARACTERS_SUCCESS = \"FETCH_CHARACTERS_SUCCESS\";\nexport const FETCH_CHARACTERS_FAILURE = \"FETCH_CHARACTERS_FAILURE\";\nexport const GET_CHARACTERS = \"GET_CHARACTERS\";\n\nexport const fetchCharactersBegin = () => ({\n  type: FETCH_CHARACTERS_BEGIN,\n});\n\nexport const fetchCharactersSuccess = (\n  data: any,\n  numberOfCharacters: number\n) => ({\n  type: FETCH_CHARACTERS_SUCCESS,\n  payload: { data, numberOfCharacters },\n});\n\nexport const fetchCharactersFailure = (error: any) => ({\n  type: FETCH_CHARACTERS_FAILURE,\n  payload: { error },\n});\n\nexport const getCharacters = (numberOfCharacters: number) => ({\n  type: GET_CHARACTERS,\n  payload: { numberOfCharacters },\n});\n\nexport function getMoreCharacters(numberOfCharacters: number) {\n  return function (dispatch: any, getState: any) {\n    const state = getState();\n\n    //if there is enough characters in store then just get them,\n    //otherwise fetch and get them\n    if (\n      state.characters &&\n      state.characters.charactersAll.length >=\n        state.characters.charactersSelected.length + numberOfCharacters &&\n      state.characters.startIndex < state.characters.data.count\n    ) {\n      dispatch(getCharacters(numberOfCharacters));\n    } else {\n      dispatch(\n        fetchAndGetCharacters(state.characters.nextUrl, numberOfCharacters)\n      );\n    }\n  };\n}\n\n\nexport function fetchAndGetCharacters(url: string, numberOfCharacters: number) {\n  return function (dispatch: any) {\n    dispatch(fetchCharactersBegin());\n    return axios.get(url).then(\n      (response) => {\n        dispatch(fetchCharactersSuccess(response.data, numberOfCharacters));\n      },\n      (error) => {\n        dispatch(fetchCharactersFailure(error));\n      }\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}